package com.zensar.springbootdemo.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.zensar.springbootdemo.Student;

@RestController
public class StudentController 
{
	
	private List<Student> students=new ArrayList<Student>();
	
	public StudentController() {
		super();
		students.add(new Student(1001,"Ram",30));
		students.add(new Student(1002,"Hari",31));
		students.add(new Student(1003,"John",32));
	}

	//@RequestMapping("/student/{studentId}")
	@GetMapping("/student/{studentId}")
	public Student getStudent(@PathVariable("studentId") int studentId) {
		//System.out.println("studentId"+studentId);
		for(Student student:students) {
			if(student.getStudentId()==studentId) {
				return student;
			}
		}
		return null;
	}
	
	//@RequestMapping(value={"/students","/listOfStudents"},method=RequestMethod.GET)
	@GetMapping(value={"/students","/listOfStudents"})
	public List<Student> getAllStudents() {
	return students;
	}
	
	//@RequestMapping(value="/students",method=RequestMethod.POST)
	@PostMapping("/students")
	public void insertStudent(@RequestBody Student student) {
		students.add(student);
		//System.out.println("HI");
	}
	
	//@RequestMapping(value="/students/{studentId}",method=RequestMethod.PUT)
	@PutMapping("/students/{studentId}")
	public void updateStudent(@PathVariable("studentId")int studentId,@RequestBody Student student) {
		Student student2 = getStudent(studentId);
		student2.setStudentId(student.getStudentId());
		student2.setStudentName(student.getStudentName());
		student2.setStudentAge(student.getStudentAge());

		students.add(student2);

	}
	
	
	//@RequestMapping(value="/students/{studentId}",method=RequestMethod.DELETE)
	@DeleteMapping("/students/{studentId}")
	public void deleteStudent(@PathVariable("studentId")int studentId) {
		for(int i=0;i<students.size();i++) {
			Student student=students.get(i);
			if(student.getStudentId()==studentId) {
				students.remove(student);
			}
		}
	}



}


get and update not working



--------------------------



package com.zensar.springbootdemo.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.zensar.springbootdemo.Student;

@RestController
@RequestMapping("/student-api")   //http://localhost:4444/student-api/students
public class StudentController 
{
	
	
	
	
	private List<Student> students=new ArrayList<Student>();
	
	public StudentController() {
		super();
		students.add(new Student(1001,"Ram",30));
		students.add(new Student(1002,"Hari",31));
		students.add(new Student(1003,"John",32));
	}

	//@RequestMapping("/student/{studentId}")
	@GetMapping("/students/{studentId}")
	public Student getStudent(@PathVariable("studentId") int studentId) {
		//System.out.println("studentId"+studentId);
		for(Student student:students) {
			if(student.getStudentId()==studentId) {
				return student;
			}
		}
		return null;
	}
	
	//@RequestMapping(value={"/students","/listOfStudents"},method=RequestMethod.GET)
	@GetMapping("/students")
	public List<Student> getAllStudents() {
	return students;
	}
	
	//@RequestMapping(value="/students",method=RequestMethod.POST)
	@PostMapping("/students")
	public void insertStudent(@RequestBody Student student) {
		students.add(student);
		//System.out.println("HI");
	}
	
	//@RequestMapping(value="/students/{studentId}",method=RequestMethod.PUT)
	@PutMapping("/students/{studentId}")
	public void updateStudent(@PathVariable("studentId")int studentId,@RequestBody Student student) {
		Student student2 = getStudent(studentId);
		student2.setStudentId(student.getStudentId());
		student2.setStudentName(student.getStudentName());
		student2.setStudentAge(student.getStudentAge());

		students.add(student2);

	}
	
	
	//@RequestMapping(value="/students/{studentId}",method=RequestMethod.DELETE)
	@DeleteMapping("/students/{studentId}")
	public void deleteStudent(@PathVariable("studentId")int studentId) {
		for(int i=0;i<students.size();i++) {
			Student student=students.get(i);
			if(student.getStudentId()==studentId) {
				students.remove(student);
			}
		}
	}
}

@RequestMapping("/student-api") 

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml -->
<dependency>
<groupId>com.fasterxml.jackson.dataformat</groupId>
<artifactId>jackson-dataformat-xml</artifactId>
<version>2.13.3</version>
</dependency>
--------------------------------------------
in postman  in headers->Accept , Application/json

[
    {
        "studentId": 1001,
        "studentName": "Ram",
        "studentAge": 30
    },
    {
        "studentId": 1002,
        "studentName": "Seeta",
        "studentAge": 28
    },
    {
        "studentId": 1003,
        "studentName": "Laxman",
        "studentAge": 26
    }
]










--------------------------------------------------
Content Negotiation 

for posting data we have to use in 
postman->click on headers->in key ->Content-Type and in value->application/xml



post   http://localhost:4444/student-api/students/

posting data in xml 


<item>
        <studentId>1005</studentId>
        <studentName>Laxman</studentName>
        <studentAge>28</studentAge>
    </item>



to get data  
get   http://localhost:4444/student-api/students/

and accepting data in json
postman->click on headers->in key ->Accept and in value->application/json




[
    {
        "studentId": 1001,
        "studentName": "Ram",
        "studentAge": 30
    },
    {
        "studentId": 1002,
        "studentName": "Seeta",
        "studentAge": 28
    },
    {
        "studentId": 1003,
        "studentName": "Laxman",
        "studentAge": 26
    },
    {
        "studentId": 1004,
        "studentName": "Laxman",
        "studentAge": 27
    },
    {
        "studentId": 1005,
        "studentName": "Laxman",
        "studentAge": 28
    }
]

--------------------------------------------------------


posting data in json

{
        "studentId": 1006,
        "studentName": "Ram",
        "studentAge": 334
    }


-------------------------------



getting data in xml format

<List>
    <item>
        <studentId>1001</studentId>
        <studentName>Ram</studentName>
        <studentAge>30</studentAge>
    </item>
    <item>
        <studentId>1002</studentId>
        <studentName>Seeta</studentName>
        <studentAge>28</studentAge>
    </item>
    <item>
        <studentId>1003</studentId>
        <studentName>Laxman</studentName>
        <studentAge>26</studentAge>
    </item>
    <item>
        <studentId>1004</studentId>
        <studentName>Laxman</studentName>
        <studentAge>27</studentAge>
    </item>
    <item>
        <studentId>1005</studentId>
        <studentName>Laxman</studentName>
        <studentAge>28</studentAge>
    </item>
    <item>
        <studentId>1006</studentId>
        <studentName>Ram</studentName>
        <studentAge>334</studentAge>
    </item>
</List>


------------------------------------------------------------


giving and posting data through annotation


package com.zensar.springbootdemo.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.zensar.springbootdemo.Student;



@Controller
@RestController
@RequestMapping("/student-api")   //http://localhost:4444/student-api/students
public class StudentController {

	private List<Student> students = new ArrayList<Student>();

	public StudentController() {
		students.add(new Student(1001, "Ram", 30));
		students.add(new Student(1002, "Seeta", 28));
		students.add(new Student(1003, "Laxman", 26));
	}

	// http://localhost:8080/student
	//@RequestMapping("/students/{studentId}")
	@GetMapping(value="/students/{studentId}",produces= {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
	public Student getStudent(@PathVariable("studentId") int studentId) {
		//System.out.println("studentId" +studentId);
		for(Student student:students) {
			if(student.getStudentId()==studentId) {
				return student;
			}
			
		}
		return null;
	}

	// http://localhost:8080/students
	//@RequestMapping(value = { "/students", "/listOfStudents" },method=RequestMethod.GET)
	@GetMapping(value="/students",produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE })
	public List<Student> getAllStudents() {
		return students;
	}
	
	// http://localhost:8080/students
	//@RequestMapping(value = "/students",method=RequestMethod.POST)
	@PostMapping(value="/students",consumes= {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
	public void insertStudent(@RequestBody Student student) {
		students.add(student);
		//System.out.println("HI");
	}
	
	//@RequestMapping(value="/students/{studentId}",method=RequestMethod.PUT)
	@PutMapping(value="/students/{studentId}",consumes= {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
	public void updateStudent(@PathVariable("studentId")int studentId,@RequestBody Student student) {
		Student student2 = getStudent(studentId);
		student2.setStudentId(student.getStudentId());
		student2.setStudentName(student.getStudentName());
		student2.setStudentAge(student.getStudentAge());
		
		students.add(student2);
		
	}
	
	//http://localhost:8080/students -> Delete
	//@RequestMapping(value="/students/{studentId}",method=RequestMethod.DELETE)
	@DeleteMapping("/students/{studentId}")
	public void deleteStudent(@PathVariable("studentId")int studentId) {
		for(int i=0;i<students.size();i++) {
			Student student=students.get(i);
			if(student.getStudentId()==studentId) {
				 students.remove(student);
			}
			
		}
	}

}


